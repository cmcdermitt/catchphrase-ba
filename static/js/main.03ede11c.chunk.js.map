{"version":3,"sources":["buzzer.mp3","CatchphraseTimer.js","CatchphraseClue.js","CatchphraseScoreboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","buzzerSound","Audio","buzzerFile","timerBuzz","play","CatchphraseTimer","props","countdownRef","React","createRef","setCountdownRef","bind","startStopTimer","console","log","this","isPaused","isCompleted","start","pause","ref","Paper","style","width","padding","textAlign","marginTop","marginBottom","height","Grid","container","direction","justify","minHeight","item","Typography","variant","intervalDelay","precision","autoStart","date","Date","now","onComplete","renderer","zeroPad","minutes","seconds","ButtonGroup","color","Button","onClick","Component","CatchphraseClue","clueJSON","state","clueText","changeClue","newText","Math","floor","random","length","setState","justifyContent","minwidth","size","CatchphraseScoreboard","theme","createMuiTheme","palette","primary","main","secondary","type","spacing","responsiveFontSizes","makeStyles","root","flexGrow","paper","App","ThemeProvider","CssBaseline","AppBar","position","Toolbar","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.03ede11c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/buzzer.535a4cf5.mp3\";","import React from \"react\";\nimport {Paper, Grid, Typography, Button, ButtonGroup} from '@material-ui/core';\nimport Countdown, {zeroPad} from 'react-countdown';\nimport buzzerFile from './buzzer.mp3'; //from http://soundbible.com/1501-Buzzer.html\n\nvar buzzerSound = new Audio(buzzerFile);\n\nfunction timerBuzz() {\n  buzzerSound.play()\n}\n\nexport default class CatchphraseTimer extends React.Component {\n  constructor(props)\n  {\n    super(props);\n    this.countdownRef = React.createRef();\n    this.setCountdownRef = this.setCountdownRef.bind(this);\n    this.startStopTimer = this.startStopTimer.bind(this);\n    // this.resetTimer = this.resetTimer.bind(this);\n  }\n\n  startStopTimer() {\n    console.log('entered startstop');\n    console.log(this.countdownRef)\n    if (this.countdownRef.isPaused() || this.countdownRef.isCompleted())\n    {\n      console.log('starting');\n      this.countdownRef.start();\n      console.log('started');\n    }\n    else\n    {\n      console.log('pausing');\n      this.countdownRef.pause();\n      console.log('paused');\n    }\n  }\n\n  setCountdownRef(ref) {\n    //gives access to the countdown api when it mounts\n    this.countdownRef = ref;\n  }\n\n  render()\n  {\n    return (\n      <Paper style={{\n        width: '100%',\n        padding: 16,\n        textAlign: 'center',\n        marginTop: 8,\n        marginBottom: 8,\n        height: '24vh'\n      }}>\n        <Grid container direction='column' justify='space-between' style={{minHeight: '100%'}}>\n          <Grid item>\n            <Typography variant='h2'>\n              <Countdown \n                intervalDelay={1000}\n                precision={0}\n                autoStart={false}\n                date={Date.now() + 180000}\n                onComplete={timerBuzz}\n                ref={this.setCountdownRef}\n                // renderer={props => <div>{zeroPad(props.minutes)}:{zeroPad(props.seconds)}.{zeroPad(Math.floor(props.milliseconds / 10))}</div>}\n                renderer={props => <div>{zeroPad(props.minutes)}:{zeroPad(props.seconds)}</div>}\n              />\n            </Typography>\n          </Grid>\n          <Grid item>\n            <ButtonGroup variant='contained' color='secondary'>\n              <Button onClick={this.startStopTimer}>Start/Stop</Button>\n              {/* <Button onClick={this.resetTimer}>Reset</Button> */}\n            </ButtonGroup>           \n          </Grid> \n        </Grid>      \n      </Paper>\n    );\n  }  \n}","import React from 'react';\nimport {Paper, Grid, Typography, Button} from '@material-ui/core';\nimport clueJSON from './all-answers.json';\n\nclass CatchphraseClue extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(clueJSON);\n    this.state = {\n      clueText: 'PRESS NEXT'\n    }\n\n    this.changeClue = this.changeClue.bind(this);\n  }\n  \n  changeClue() {\n    var newText = clueJSON[Math.floor(Math.random() * clueJSON.length)]\n    console.log('changing to ' + newText);\n    this.setState({\n      clueText: newText\n    });\n  }\n\n  render() {\n    return (\n      <Paper style={{\n        width: '100%',\n        padding: 16,\n        textAlign: 'center',\n        marginTop: 8,\n        marginBottom: 8,\n        height: '54vh',\n        justifyContent: 'space-between'\n      }}>\n        <Grid container direction='column' justify='space-between' style={{minHeight: '100%'}}>\n          <Grid item>\n            <Typography variant='h2'>\n              {this.state.clueText}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Button minwidth='50%' size='large' color='secondary' variant='contained' onClick={this.changeClue}>\n              NEXT\n            </Button>\n          </Grid> \n        </Grid>             \n      </Paper>\n    );  \n  }\n}\n\nexport default CatchphraseClue;\n","import React from 'react';\nimport {Box, Card, CardContent, Paper, Grid} from '@material-ui/core';\n\nfunction CatchphraseScoreboard() {\n  return (\n    <Grid item>\n        <Paper width=\"100%\">\n            <p style={{padding: 50}}>\n                TEAM 1 20 - 40 TEAM 2\n            </p>\n        </Paper>\n    </Grid>\n  );\n}\n\nexport default CatchphraseScoreboard;\n","import React from 'react';\nimport {AppBar, Toolbar, IconButton, CssBaseline, Container} from '@material-ui/core';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport CatchphraseTimer from './CatchphraseTimer.js';\nimport CatchphraseClue from './CatchphraseClue.js';\nimport CatchphraseScoreboard from './CatchphraseScoreboard.js';\nimport './App.css';\n\nimport { createMuiTheme, makeStyles, ThemeProvider, responsiveFontSizes } from '@material-ui/core/styles';\n\nvar theme = createMuiTheme({\n  palette: {\n  //   primary: indigo,\n  //   secondary: deepPurple,\n    primary: { main: '#303F9F' },\n    secondary: { main: '#AB47BC' },\n    type: 'dark',\n  },\n  spacing: 8,\n});\n\ntheme = responsiveFontSizes(theme);\n\nconst styles = makeStyles({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    width: '100%',\n    padding: theme.spacing(2),\n    marginTop: 8,\n    marginBottom: 8,\n    textAlign: 'center',\n  },\n});\n\nconst classes = {styles}\n\nfunction App() {\n  return (\n    <ThemeProvider theme = {theme}>\n      <CssBaseline />\n\n      <AppBar color='primary' position=\"sticky\">\n        <Toolbar>\n          {/*\n          /////TODO: add settings/////\n          <IconButton aria-label=\"Settings\" color='inherit'>\n            <SettingsIcon />\n          </IconButton> */}\n\n          Catchphrase Before &amp; After\n\n        </Toolbar>\n      </AppBar>\n      <Container height='100%'>\n        <CatchphraseTimer />     \n        <CatchphraseClue />\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}